#include <iostream>
#include <unistd.h>
#include <stdio.h>
#include <string>
#include <algorithm>

using namespace std;

//This is just skeleton code that I'll edit later

//If you can't afford decent clothing, I'm not sure we should be talking.
//I applaud your creativity, but guar blankets aren't for wearing.
//Smelly, unkempt, unwashed. I see standards are lowered everyday.
//Stay out of trouble and you won't get hurt.
//Oooh. You're naked. Spare me.

string parse(string command){ //parses the entered command string by returning the first command (if there is one)
    int one=command.find(";"), int two=command.find("&&"), int three=command.find("||"); //parse first command
    if(one!= -1 || two != -1 || three != -1) { //there was a valid command
      string current;
      int finder = command.find_first_of(";&|");
      if(command.find("&&")==finder || command.find("||")==finder || command.find(";" == finder) { //it was a valid && || or ;command
        current=command.substr(0,finder); //put the command in to its own string
        
      }
      return current;
    }
}

bool letsgo(string cmd, char **argv){
  int pid=fork();
      if (pid== -1) { //something went wrong if pid is negative
        perror("fork fail");
        return false;
      }
      else if (pid == 0) { //we're in the child function if pid is 0
        if (execvp(cmd,argv) != 0) {
          //cerr << "error in execvp" << endl;
          perror("error in execvp");
          return false;
        }
        else return true;
      }
      else { //otherwise we're in the parent function
        cerr << "I'm not impressed. Find yourself some rags." << endl;
        return false;
      }
}

int main(int argc, char **argv)
{
  /*
  for (int i=0; i<argc; i++) {
    cout << "argv[" << i << "] = " << argv[i] << endl;
  }
  */
  cout << "$" << endl;
  //char *cmd="lsdoesnotexist";
  string command;
  cin >> command;
  bool psuccess; //stores whether or not the last run command was a success, for && and ||
  int last=-1; //indicates what type last command was, -1 for no previous command 0 for ; 1 for && and 2 for ||
  while(command!="exit"){
    command=command.substr(0,command.find_first_of("#")); //anything after a # is a comment and should be ignored
    string usethis = parse(command); //usethis is now the first command...including the ; & or |.
    if(usethis=="") //there weren't any connectors so just run the whole line
    else if(usethis.at(usethis.size()-1)==';') {
        psuccess = letsgo(usethis.substr(0,usethis.size()-1), argv);
        command.erase(0,usethis.size()); //trim the command string
        last=0;
    }
    else if(usethis.at(usethis.size()-1)=='&') {
        
        psuccess = letsgo(usethis.substr(0,usethis.size()-1), argv);
        command.erase(0,usethis.size()+1); //trim the command string
        last=1;
    }
    else if(usethis.at(usethis.size()-1)=='|') {
        psuccess = letsgo(usethis.substr(0,usethis.size()-1), argv);
        command.erase(0,usethis.size()+1); //trim the command string
        last=2;
    }
    cout << "$" << endl;
    cin >> command;
  }
  return 0;
}
